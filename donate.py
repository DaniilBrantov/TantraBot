
from telebot import types
import configure
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3


DONATE_MESSAGE = "*üí∞ | –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*"
ERROR_MESSAGE = "üö´ | –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
SUCCESSFUL_REQUEST_MESSAGE = "üî∞ | –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞?"

def handle_donate(message, client, sql):
    cid = message.message.chat.id

    try:
        client.delete_message(cid, message.message.message_id)

        msg = client.send_message(cid, DONATE_MESSAGE, parse_mode='Markdown')
        client.register_next_step_handler(msg, lambda message: handle_donate_value(message, client, sql, types))

    except:
        client.send_message(cid, ERROR_MESSAGE)

def handle_donate_value(message, client, sql, types):
    cid = message.chat.id

    try:
        uid = message.from_user.id
        if message.text == message.text:
            sql.execute(f"SELECT * FROM users WHERE id = {uid}")
            donatevalue = int(message.text)
            rmk = types.InlineKeyboardMarkup()
            item_yes = types.InlineKeyboardButton(text='‚úÖ', callback_data=f'donateyes_{donatevalue}')
            item_no = types.InlineKeyboardButton(text='‚ùå', callback_data=f'donateno_{donatevalue}')

            rmk.add(item_yes, item_no)
            msg = client.send_message(cid, SUCCESSFUL_REQUEST_MESSAGE, parse_mode='Markdown', reply_markup=rmk)
    except:
        client.send_message(cid, ERROR_MESSAGE)

def handle_donateyes_paid(call, client, sql):
    try:
        uid = call.message.from_user.id
        cid = call.message.chat.id
        sql.execute("SELECT id FROM users WHERE access > 0")
        users_with_access = [row[0] for row in sql.fetchall()]
        print(call.data)

        if call.data.startswith('donatepaid'):
            donatevalue = call.data.split('_')[1]
            client.delete_message(call.message.chat.id, call.message.message_id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            for user_id in users_with_access:
                print(call.data)
                print(user_id)
                # Send the message to each user
                client.send_message(user_id, f"‚úâÔ∏è | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –æ–ø–ª–∞—Ç–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n\n\n–°—É–º–º–∞: {donatevalue}$\n\n–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∑–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–¥–∞—á—É —Å—Ä–µ–¥—Å—Ç–≤.\n–î–ª—è –≤—ã–¥–∞—á–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–ø–∏—à–∏—Ç–µ: /giverub")
            
            keyboard = [[types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data=f'help')]]
            reply_markup = types.InlineKeyboardMarkup(keyboard)
            
            # Optionally, send a confirmation message to the original user
            client.send_message(cid, "‚úâÔ∏è | –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏ –≤—ã–¥–∞—á–∏ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=reply_markup)
    
    except Exception as e:
        error_message = f'üö´ | –û—à–∏–±–∫–∞: {e}'
        if cid is not None:
            client.send_message(cid, error_message)
        else:
            print(error_message)

            
def handle_donate_result(call, client, sql):
    crypto_wallet = configure.config['crypto_wallet']
    try:
        if call.data.startswith('donateyes_'):
            donatevalue = call.data.split('_')[1]
            client.delete_message(call.message.chat.id, call.message.message_id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # Creating the reply markup with the "–û–ø–ª–∞—á–µ–Ω–æ" button
            keyboard = [[types.InlineKeyboardButton('‚úÖ –û–ø–ª–∞—á–µ–Ω–æ', callback_data=f'donatepaid_{donatevalue}')]]
            reply_markup = types.InlineKeyboardMarkup(keyboard)
            
            # Sending the message with the correct reply markup
            client.send_message(call.message.chat.id, f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚òéÔ∏è –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {crypto_wallet}\nüí∞ –°—É–º–º–∞: {donatevalue}$\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", parse_mode='Markdown', reply_markup=reply_markup)
            return donatevalue
            
        elif call.data.startswith('donateno_'):
            client.answer_callback_query(callback_query_id=call.id)
            client.send_message(call.message.chat.id, "‚ùå | –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤")
    except Exception as e:
        client.send_message(call.message.chat.id, f'üö´ | –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {str(e)}')
